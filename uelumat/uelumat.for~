       include "umat.for" 
       SUBROUTINE UEL(RHS,AMATRX,SVARS,ENERGY,NDOFEL,NRHS,NSVARS,
     1 PROPS,NPROPS,COORDS,MCRD,NNODE,U,DU,V,A,JTYPE,TIME,DTIME,
     2 KSTEP,KINC,JELEM,PARAMS,NDLOAD,JDLTYP,ADLMAG,PREDEF,NPREDF,
     3 LFLAGS,MLVARX,DDLMAG,MDLOAD,PNEWDT,JPROPS,NJPROP,PERIOD)
C
      INCLUDE 'ABA_PARAM.INC'
C
      DIMENSION RHS(MLVARX,*),AMATRX(NDOFEL,NDOFEL),PROPS(*),
     1 SVARS(*),ENERGY(8),COORDS(MCRD,NNODE),U(NDOFEL),
     2 DU(MLVARX,*),V(NDOFEL),A(NDOFEL),TIME(2),PARAMS(*),
     3 JDLTYP(MDLOAD,*),ADLMAG(MDLOAD,*),DDLMAG(MDLOAD,*),
     4 PREDEF(2,NPREDF,NNODE),LFLAGS(*),JPROPS(*)
c
c
c     initialize rhs and amatrx to zero
c
      parameter(zero=0.d0,one=1.0d0)
      parameter (ndim=2, ndof=2, ndi=3, nshr=1, nnodemax=4,
     1     ntens=4, ninpt=4, nsvint=8)
c
      dimension  stiff(ndof*nnodemax,ndof*nnodemax),
     1 force(ndof*nnodemax), shape(nnodemax), dshape(ndim,nnodemax),
     2 xjaci(ndim,ndim), bmat(nnodemax*ndim), statevLocal(nsvint),
     3 stress(ntens), ddsdde(ntens, ntens),
     4 stran(ntens), dstran(ntens), wght(ninpt)
c  
      dimension coords_ip(3),dfgrd0(3,3),dfgrd1(3,3),
     1 drot(3,3), ddsddt(ntens), drplde(ntens)
      dimension coords_new(mcrd,nnodemax)
c
      dimension predef_loc(npredf),dpredef_loc(npredf),xx1(3,3),
     *     xx1Old(3,3)
      dimension xjaci_new(ndim,ndim),bmat_new(nnodemax*ndim)
c
      data wght /one, one, one, one/
      open(unit=300,file="E:\debug.dat")
      do k1=1,ndofel
         rhs(k1,1)=zero
         do k2=1,ndofel
           amatrx(k1,k2)=zero
         end do
      end do
c
c    loop over integration points
c    
      do kintk=1,ninpt
        call shapeFcn(kintk,ninpt,nnode,ndim,shape,dshape)      
        call Jacobian(jelem,mcrd,ndim,nnode,
     1 coords,dshape,djac,xjaci,pnewdt)
        call bmatrix(xjaci,dshape,nnode,ndim,bmat)
        write(*,*),"bmat",bmat(1)
        call strainInc(ntens,ndof,ndim,nnode,
     1 mlvarx,bmat,du,dstran)
c    call constitutive routine
        call stateVar(kintk,nsvint,svars,statevLocal,1)
        sse=zero
        call UMAT(STRESS,statevLocal,DDSDDE,SSE,SPD,SCD,
     1  RPL,DDSDDT,DRPLDE,DRPLDT,
     2  STRAN,DSTRAN,TIME,DTIME,TEMP,DTEMP,PREDEF,DPRED,CMNAME,
     3  NDI,NSHR,NTENS,NSTATV,PROPS,NPROPS,COORDS,DROT,PNEWDT,
     4  CELENT,DFGRD0,DFGRD1,NOEL,NPT,LAYER,KSPT,JSTEP,KINC) 
        call stateVar(kintk,nsvint,svars,statevLocal,0)
c
c   from stiffness matrix and internal force vector
c
        call stiffmatrix(ntens,nnode,ndim,ndof,
     1  wght(kintk),djac,ddsdde,stress,bmat,stiff,force)
c
c    assemble rhs and lhs
c
        do k1=1,ndof*nnode
           rhs(k1,1)=rhs(k1,1)-force(k1)
          do k2=1,ndof*nnode
            amatrx(k1,k2)=amatrx(k1,k2)+stiff(k1,k2)
          end do
        end do
      end do
      write(300,*)"kmatrix"
      do i=1,ndofel
         write(300,101) (amatrx(i,j),j=1,ndofel)
      end do
      write(300,*)"rhs"
      do i=1,ndofel
         write(300,*) force(i,1)
      end do
c
101   format(F10.3,2x,F10.3,2x,F10.3,2x,F10.3,2x,F10.3,2x,F10.3,2x,F10.3,2x,F10.3)     
      RETURN
      END
      subroutine shapeFcn(kintk,ninpt,nnode,ndim,shape,dshape)
c
      include 'aba_param.inc'
c
      parameter(dmone=-1.0d0,one=1.0d0,four=4.0d0,
     1 gaussCoord=0.577350269d0)
      dimension shape(*),dshape(ndim,*),coord24(2,4)
c
      data coord24 /dmone,dmone,
     1                one,dmone,
     2                one,  one,
     3              dmone,one/
c
      g=coord24(1,kintk)*gaussCoord
      h=coord24(2,kintk)*gaussCoord
c
c     shape functions
c
      shape(1)=(one-g)*(one-h)/four
      shape(2)=(one+g)*(one-h)/four
      shape(3)=(one+g)*(one+h)/four
      shape(4)=(one-g)*(one+h)/four
c
c     derivative shape/d(g)
c
      dshape(1,1)=-(one-h)/four
      dshape(1,2)= (one-h)/four
      dshape(1,3)= (one+h)/four
      dshape(1,4)=-(one+h)/four
c
c     derivative shape/d(h)
c
      dshape(2,1)=-(one-g)/four
      dshape(2,2)=-(one+g)/four
      dshape(2,3)= (one+g)/four
      dshape(2,4)= (one-g)/four
      return
      end
c
      subroutine Jacobian(jelem,mcrd,ndim,nnode,
     1 coords,dshape,djac,xjaci,pnewdt)
c
      include 'aba_param.inc'
c
      parameter(zero=0.d0,fourth=0.25d0)
      dimension xjac(2,2),xjaci(2,*),coords(mcrd,*)
      dimension dshape(ndim,*)
c
      do i=1,ndim
         do j=1,ndim
          xjac(i,j)=zero
          xjaci(i,j)=zero
         end do
      end do
c
      do inod=1,nnode
         do idim=1,ndim
           do jdim=1,ndim
            xjac(jdim,idim)=xjac(jdim,idim)+
     1      dshape(jdim,inod)*coords(idim,inod)
           end do
         end do
      end do
c
      djac=xjac(1,1)*xjac(2,2)-xjac(1,2)*xjac(2,1)
c
      if(djac.gt.zero) then
        xjaci(1,1)=xjac(2,2)/djac
        xjaci(2,2)=xjac(1,1)/djac
        xjaci(1,2)=-xjac(1,2)/djac
        xjaci(2,1)=-xjac(2,1)/djac
      else
c     negative or zero jacobian
      write(7,*) 'warning: element',jelem,'has neg.
     1            Jacobian'
      pnewdt=fourth
      end if
c
      return
      end
c
      subroutine bmatrix(xjaci,dshape,nnode,ndim,bmat)
c
c      bmat(i).....dN1/dx,dN2/dy,dN2/dx,dN2/dy,.. for node 1; then for
c                  node 2, ect.
c      xjaci......inverse Jacobian matrix
c      dshape.....derivative of shape functions
      include 'aba_param.inc'
c
      parameter (zero=0.d0)
      dimension bmat(*),dshape(ndim,*)
      dimension xjaci(2,*)
c
      do i=1,nnode*ndim
         bmat(i)=zero
      end do
c
      do inod=1,nnode
        do ider=1,ndim
          do idim=1,ndim
            irow=idim+(inod-1)*ndim
            bmat(irow)=bmat(irow)+
     1      xjaci(idim,ider)*dshape(ider,inod)
          end do
        end do
      end do
c
      return
      end
c
      subroutine stateVar(npt,nsvint,statev,statev_ip,icopy)
c
c     Transfer data to/from element-level state variable array from/to
c     material-point level state variable array.
c     
      include 'aba_param.inc'
      dimension statev(*),statev_ip(*)
      isvinc=(npt-1)*nsvint
      if (icopy.eq.1) then
c
c     Prepare arrays for entry into umat
c
        do i=1,nsvint
          statev_ip(i)=statev(i+isvinc)
        end do
      else
c
c     Update element state variables upto return from umat
c
        do i=1,nsvint
          statev(i+isvinc)=statev_ip(i)
        end do
       end if
      return
      end 
c
      subroutine stiffmatrix(ntens,nnode,ndim,ndof,
     1 weight,djac,ddsdde,stress,bmat,stiff,force)
c
c     Stiffness matrix and internal force contributions at
c     material integration point
c     
      include 'aba_param.inc'
c
      parameter(zero=0.d0)
      dimension stiff(ndof*nnode,*),stiff_p(2,2)
      dimension force(*),force_p(2)
      dimension stress(*),bmat(ndim,*),ddsdde(ntens,*)
      double precision dNjdx,dNjdy
c
      dNjdx=zero
      dNjdy=zero
c
      do i=1,ndof*nnode
         force(i)=zero
         do j=1,ndof*nnode
           stiff(j,i)=zero
         end do
      end do
c
      dvol=weight*djac
c
      do nodj=1,nnode
         incr_col=(nodj-1)*ndof
         dNjdx=bmat(1,nodj)
         dNjdy=bmat(2,nodj)
c
         force_p(1)=dNjdx*stress(1)+
     1              dNjdy*stress(4)
c
         force_p(2)=dNjdy*stress(2)+
     1              dNjdx*stress(4)
        do jdof=1,ndof
          jcol=jdof+incr_col
          force(jcol)=force(jcol)+
     1    force_P(jdof)*dvol
        end do
c
        do nodi=1,nnode
          incr_row=(nodi-1)*ndof
          dNidx=bmat(1,nodi)
          dNidy=bmat(2,nodi)
          stiff_p(1,1) = dNidx*ddsdde(1,1)*dNjdx
     &             + dNidy*ddsdde(4,4)*dNjdy
     &             + dNidx*ddsdde(1,4)*dNjdy
     &             + dNidy*ddsdde(4,1)*dNjdx
c
          stiff_p(1,2) = dNidx*ddsdde(1,2)*dNjdy
     &             + dNidy*ddsdde(4,4)*dNjdx
     &             + dNidx*ddsdde(1,4)*dNjdx
     &             + dNidy*ddsdde(4,2)*dNjdy
c              
          stiff_p(2,1) = dNidy*ddsdde(2,1)*dNjdx
     &             + dNidx*ddsdde(4,4)*dNjdy
     &             + dNidy*ddsdde(2,4)*dNjdy
     &             + dNidx*ddsdde(4,1)*dNjdx
c
          stiff_p(2,2) = dNidy*ddsdde(2,2)*dNjdy
     &             + dNidx*ddsdde(4,4)*dNjdx
     &             + dNidy*ddsdde(2,4)*dNjdx
     &             + dNidx*ddsdde(4,2)*dNjdy
c
           do jdof = 1, ndof
              icol = jdof + incr_col
              do idof = 1, ndof
                irow = idof + incr_row
                stiff(irow,icol) = stiff(irow,icol) +
     &          stiff_p(idof,jdof)*dvol
              end do
           end do
         end do
       end do
c
      return 
      end
c
      subroutine strainInc(ntens,ndof,ndim,nnode,
     1 mlvarx,bmat,du,dstran)
c
c    Notion:
c      dstran(i): incremental strain compont
c      note:      i=1   xx direction
c                  =2   yy direction
c                  =3   zz direction
c                  =4   xy direction
        include 'aba_param.inc'
c    
        parameter(zero=0.d0)
c
        dimension dstran(*),bmat(ndim,*),du(mlvarx,*),xdu(3)
c
        do i=1,ntens
           dstran(i)=zero
        end do
c
        do ndoi=1,nnode
          incr_row=(nodi-1)*ndof
          do i=1,ndof
            xdu(i)=du(i+incr_row,1)
          end do
c
          dNidx=bmat(1,ndoi)
          dNidy=bmat(2,ndoi)
c
          dstran(1)=dstran(1)+dNidx*xdu(1)
          dstran(2)=dstran(2)+dNidy*xdu(2)
          dstran(4)=dstran(4)+dNidy*xdu(1)+dNidx*xdu(2)
        end do
        return
        end
     
